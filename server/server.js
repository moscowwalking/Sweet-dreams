import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import fetch from 'node-fetch';
import fs from 'fs';

const app = express();

// ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è CORS
const allowedOrigins = [
  'http://localhost:5500',
  'http://127.0.0.1:5500',
  'http://localhost:3000',
  'https://moscowwalking.github.io'
];

app.use(cors({
  origin: function (origin, callback) {
    if (!origin) return callback(null, true);
    if (allowedOrigins.includes(origin)) return callback(null, true);
    console.log('üö´ Blocked by CORS:', origin);
    return callback(new Error('Not allowed by CORS'));
  }
}));

app.use(bodyParser.json());

app.get('/', (_, res) => {
  res.send('‚úÖ ICS mail server with UniSender Go is running');
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è ICS
function formatDateLocal(d) {
  const pad = n => (n < 10 ? '0' + n : n);
  return (
    d.getFullYear().toString() +
    pad(d.getMonth() + 1) +
    pad(d.getDate()) +
    'T' +
    pad(d.getHours()) +
    pad(d.getMinutes()) +
    pad(d.getSeconds())
  );
}
app.post('/send-invite', async (req, res) => {
  try {
    console.log('üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /send-invite:');
    console.log(req.body);

    const { city, place, date, timeStart, timeEnd, email } = req.body;

    // –ï—Å–ª–∏ email –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π sandbox-–∞–¥—Ä–µ—Å
    const recipientEmail = email?.trim() || 'test@sandbox-7833842-f4b715.unigosendbox.com';
    if (!email) {
      console.log('‚ö†Ô∏è Email –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π sandbox-–∞–¥—Ä–µ—Å.');
    }

    if (!city || !place || !date || !timeStart || !timeEnd) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: city, place, date, timeStart, timeEnd' });
    }

    // –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    const [year, month, day] = date.split('-').map(Number);
    const [startHour, startMinute] = timeStart.split(':').map(Number);
    const [endHour, endMinute] = timeEnd.split(':').map(Number);

    const start = new Date(year, month - 1, day, startHour, startMinute);
    const end = new Date(year, month - 1, day, endHour, endMinute);

    // –§–æ—Ä–º–∏—Ä—É–µ–º ICS-—Ñ–∞–π–ª
    const icsString = `BEGIN:VCALENDAR
VERSION:2.0
CALSCALE:GREGORIAN
METHOD:REQUEST
BEGIN:VEVENT
UID:${Date.now()}@sweet-dreams
DTSTAMP:${formatDateLocal(new Date())}
DTSTART;TZID=Europe/Moscow:${formatDateLocal(start)}
DTEND;TZID=Europe/Moscow:${formatDateLocal(end)}
SUMMARY:üíñ –í—Å—Ç—Ä–µ—á–∞
DESCRIPTION:–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è! ${city}, ${place}.
LOCATION:${place}, ${city}
STATUS:CONFIRMED
SEQUENCE:0
TRANSP:OPAQUE
END:VEVENT
END:VCALENDAR`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    fs.writeFileSync('/tmp/invite.ics', icsString);
    console.log('üìé –§–∞–π–ª invite.ics —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ü–†–û–°–ê
    const payload = {
      api_key: process.env.UNISENDER_API_KEY,
      message: {
        recipients: [
          {
            email: recipientEmail,
            substitutions: {
              to_name: "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥" // –ú–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–º—è
            }
          }
        ],
        body: {
          html: `<p>–°–æ–±—ã—Ç–∏–µ: <b>${city}</b>, ${place}, ${date} —Å ${timeStart} –¥–æ ${timeEnd}</p>`,
          plaintext: `–°–æ–±—ã—Ç–∏–µ: ${city}, ${place}, ${date} —Å ${timeStart} –¥–æ ${timeEnd}`
        },
        subject: `üíå –í—Å—Ç—Ä–µ—á–∞: ${city}, ${place}`,
        from_email: process.env.FROM_EMAIL || 'test@sandbox-7833842-f4b715.unigosendbox.com',
        from_name: "Sweet Dreams",
        track_links: 0,
        track_read: 0,
        attachments: [
          {
            type: 'text/calendar',
            name: 'invite.ics',
            content: Buffer.from(icsString).toString('base64')
          }
        ]
      }
    };

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ UniSender...');
    console.log('Payload:', JSON.stringify(payload, null, 2));

    const response = await fetch('https://go2.unisender.ru/ru/transactional/api/v1/email/send.json', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        
      },
      body: JSON.stringify(payload)
    });

    let data;
    try {
      data = await response.json();
    } catch (err) {
      const text = await response.text();
      console.error('‚ùå UniSender –Ω–µ –≤–µ—Ä–Ω—É–ª JSON. –û—Ç–≤–µ—Ç:', text);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ UniSender' });
    }

    console.log('üì® UniSender –æ—Ç–≤–µ—Ç:', data);

    if (response.ok) {
      console.log('‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      return res.json({ 
        success: true, 
        message: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
        unisender_response: data 
      });
    } else {
      console.error('üí• UniSender error:', data);
      return res.status(500).json({ 
        error: data.error || '–û—à–∏–±–∫–∞ UniSender',
        details: data 
      });
    }

  } catch (err) {
    console.error('üî• Server error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + err.message });
  }
});