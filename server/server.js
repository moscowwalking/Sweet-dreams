import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import fetch from 'node-fetch';
import fs from 'fs';
import AWS from 'aws-sdk';
import multer from 'multer';
import path from 'path';
import sharp from 'sharp';

const app = express();

const allowedOrigins = [
  'http://localhost:5500',
  'http://127.0.0.1:5500',
  'http://localhost:3000',
  'https://moscowwalking.github.io',
  'https://sweet-dreams-f8nc.onrender.com'
];

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.url}`);
  next();
});

app.use(cors({
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.includes(origin)) return callback(null, true);
    console.log('üö´ Blocked by CORS:', origin);
    return callback(new Error('Not allowed by CORS'));
  }
}));

app.use(bodyParser.json());
app.use(express.static('public'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const upload = multer({ 
  dest: '/tmp/uploads/',
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  }
});

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('/tmp/uploads')) {
  fs.mkdirSync('/tmp/uploads', { recursive: true });
}

const s3 = new AWS.S3({
  endpoint: process.env.YANDEX_ENDPOINT,
  accessKeyId: process.env.YANDEX_ACCESS_KEY,
  secretAccessKey: process.env.YANDEX_SECRET_KEY,
  region: 'ru-central1',
});

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç
const PLACES_FILE = 'places.json';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const SUPPORTED_FORMATS = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/heif', 'image/heic'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ places.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function initPlacesFile() {
  if (!fs.existsSync(PLACES_FILE)) {
    fs.writeFileSync(PLACES_FILE, JSON.stringify([]));
    console.log('‚úÖ Created places.json');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function getPlaceName(coords) {
  const [lat, lon] = coords;
  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –ø–æ–∑–∂–µ
  if (lat > 55.7 && lat < 55.8 && lon > 37.5 && lon < 37.7) {
    return '–ú–æ—Å–∫–≤–∞';
  }
  return '–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
function getPlacesCount() {
  try {
    if (fs.existsSync(PLACES_FILE)) {
      const data = fs.readFileSync(PLACES_FILE, 'utf8');
      const places = JSON.parse(data);
      return places.length;
    }
  } catch (error) {
    console.error('Error counting places:', error);
  }
  return 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è places.json –≤ S3
async function backupPlacesToS3() {
  try {
    if (!fs.existsSync(PLACES_FILE)) {
      console.log('No places.json to backup');
      return;
    }
    
    const data = fs.readFileSync(PLACES_FILE);
    const s3Params = {
      Bucket: process.env.YANDEX_BUCKET,
      Key: 'backups/places.json',
      Body: data,
      ContentType: 'application/json',
      ACL: 'public-read',
    };
    
    await s3.upload(s3Params).promise();
    console.log('‚úÖ places.json backed up to S3');
  } catch (error) {
    console.error('‚ùå Backup failed:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è places.json –∏–∑ S3
async function restorePlacesFromS3() {
  try {
    const s3Params = {
      Bucket: process.env.YANDEX_BUCKET,
      Key: 'backups/places.json',
    };
    
    console.log('üîÑ Attempting to restore places from S3...');
    const data = await s3.getObject(s3Params).promise();
    
    if (data.Body) {
      fs.writeFileSync(PLACES_FILE, data.Body);
      const places = JSON.parse(data.Body);
      console.log(`‚úÖ places.json restored from S3 with ${places.length} photos`);
    } else {
      throw new Error('Empty backup file');
    }
  } catch (error) {
    if (error.code === 'NoSuchKey') {
      console.log('üìù No backup found in S3, starting fresh');
      initPlacesFile();
    } else {
      console.error('‚ùå Restore failed:', error.message);
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      initPlacesFile();
    }
  }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    placesCount: getPlacesCount()
  });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç
app.get('/places.json', (req, res) => {
  initPlacesFile();
  try {
    const data = fs.readFileSync(PLACES_FILE, 'utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
    if (!data || data.trim() === '') {
      console.log('places.json is empty, returning empty array');
      return res.json([]);
    }
    
    const places = JSON.parse(data);
    console.log(`‚úÖ Returning ${places.length} places from places.json`);
    res.json(places);
  } catch (error) {
    console.error('‚ùå Error reading places.json:', error);
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π JSON, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    res.json([]);
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ (–¥–ª—è –∫–∞—Ä—Ç—ã –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π)
app.post('/upload', upload.single('photo'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    console.log('üì∏ Received file:', {
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if (!SUPPORTED_FORMATS.includes(req.file.mimetype)) {
      return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º GPS –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    let gps = null;
    if (req.body.gps) {
      try {
        gps = JSON.parse(req.body.gps);
        console.log('üìç GPS from request:', gps);
      } catch (e) {
        console.log('Invalid GPS data');
      }
    }

    let fileBuffer;
    let finalMimetype = req.file.mimetype;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIC/HEIF –≤ JPEG
    if (req.file.mimetype === 'image/heic' || req.file.mimetype === 'image/heif') {
      try {
        console.log('üîÑ Converting HEIC to JPEG...');
        fileBuffer = await sharp(req.file.path)
          .jpeg({ quality: 90 })
          .toBuffer();
        finalMimetype = 'image/jpeg';
        console.log('‚úÖ HEIC converted to JPEG');
      } catch (conversionError) {
        console.error('HEIC conversion failed:', conversionError);
        // –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        fileBuffer = fs.readFileSync(req.file.path);
      }
    } else {
      fileBuffer = fs.readFileSync(req.file.path);
    }

    const fileExtension = finalMimetype.split('/')[1];
    const filename = `memory-${Date.now()}.${fileExtension}`;
    
    const s3Params = {
      Bucket: process.env.YANDEX_BUCKET,
      Key: filename,
      Body: fileBuffer,
      ContentType: finalMimetype,
      ACL: 'public-read',
    };

    const s3Upload = await s3.upload(s3Params).promise();
    console.log('‚úÖ Photo uploaded to Yandex Cloud:', s3Upload.Location);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ
    const photo = {
      id: Date.now().toString(),
      coords: gps ? [gps.latitude, gps.longitude] : [55.75, 37.61],
      thumbUrl: s3Upload.Location,
      origUrl: s3Upload.Location,
      placeTitle: getPlaceName(gps ? [gps.latitude, gps.longitude] : [55.75, 37.61]),
      timestamp: new Date().toISOString(),
      filename: filename,
      originalFilename: req.file.originalname
    };

    console.log('üì∏ Created photo object:', photo);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ places.json
    initPlacesFile();
    const places = JSON.parse(fs.readFileSync(PLACES_FILE, 'utf8'));
    places.push(photo);
    fs.writeFileSync(PLACES_FILE, JSON.stringify(places, null, 2));

    // –ë—ç–∫–∞–ø–∏–º –≤ S3 –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    await backupPlacesToS3();

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(req.file.path);

    res.json({ 
      success: true, 
      photo: photo 
    });

  } catch (error) {
    console.error('Upload error:', error);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ
app.get('/photos', (req, res) => {
  initPlacesFile();
  try {
    const data = fs.readFileSync(PLACES_FILE, 'utf8');
    res.json(JSON.parse(data));
  } catch (error) {
    res.json([]);
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
app.use('/uploads', express.static('public/uploads'));

// –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
app.get('/', (_, res) => {
  res.send('‚úÖ ICS mail server with UniSender Go is running');
});

function formatDateLocal(d) {
  const pad = n => (n < 10 ? '0' + n : n);
  return (
    d.getFullYear().toString() +
    pad(d.getMonth() + 1) +
    pad(d.getDate()) +
    'T' +
    pad(d.getHours()) +
    pad(d.getMinutes()) +
    pad(d.getSeconds())
  );
}

app.post('/send-invite', async (req, res) => {
  try {
    const { city, place, date, timeStart, timeEnd, email } = req.body;

    if (!city || !place || !date || !timeStart || !timeEnd) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: city, place, date, timeStart, timeEnd' });
    }

    const recipientEmails = [
      email?.trim() || 'n.s.55@inbox.ru',
      'oda2002@mail.ru'
    ];

    const [year, month, day] = date.split('-').map(Number);
    const [startHour, startMinute] = timeStart.split(':').map(Number);
    const [endHour, endMinute] = timeEnd.split(':').map(Number);

    const start = new Date(year, month - 1, day, startHour, startMinute);
    const end = new Date(year, month - 1, day, endHour, endMinute);

    const icsString = `BEGIN:VCALENDAR
      VERSION:2.0
      CALSCALE:GREGORIAN
      METHOD:REQUEST
      BEGIN:VEVENT
      UID:${Date.now()}@sweet-dreams
      DTSTAMP:${formatDateLocal(new Date())}
      DTSTART;TZID=Europe/Moscow:${formatDateLocal(start)}
      DTEND;TZID=Europe/Moscow:${formatDateLocal(end)}
      SUMMARY:üíñ –í—Å—Ç—Ä–µ—á–∞
      DESCRIPTION:–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è! ${city}, ${place}.
      LOCATION:${place}, ${city}
      STATUS:CONFIRMED
      SEQUENCE:0
      TRANSP:OPAQUE
      END:VEVENT
      END:VCALENDAR`;

    fs.writeFileSync('/tmp/invite.ics', icsString);

    const payload = {
      api_key: process.env.UNISENDER_API_KEY,
      message: {
        recipients: recipientEmails.map(address => ({
          email: address,
          substitutions: { to_name: "–î—Ä—É–≥" },
          metadata: { campaign_id: "test-invite" }
        })),
        subject: `üíå –í—Å—Ç—Ä–µ—á–∞: ${city}, ${place}`,
        from_email: 'invite@sandbox-7833842-f4b715.unigosendbox.com', 
        from_name: 'Sweet Dreams',
        body: {
          html: `<p>–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è –≤ <b>${city}</b>!<br>üìç ${place}<br>üìÖ ${date}<br>‚è∞ ${timeStart}‚Äì${timeEnd}</p>`,
          plaintext: `–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è –≤ ${city}, ${place}, ${date}, ${timeStart}‚Äì${timeEnd}`
        },
        attachments: [
          {
            type: 'text/calendar',
            name: 'invite.ics',
            content: Buffer.from(icsString).toString('base64')
          }
        ]
      }
    };

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ UniSender...');
    const response = await fetch('https://go2.unisender.ru/ru/transactional/api/v1/email/send.json', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.UNISENDER_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const data = await response.json();
    console.log('üì® –û—Ç–≤–µ—Ç UniSender:', data);

    if (response.ok && !data.error) {
      res.json({ success: true, message: '–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', data });
    } else {
      res.status(500).json({ error: data.error?.message || '–û—à–∏–±–∫–∞ UniSender', details: data });
    }
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + err.message });
  }
});

app.post('/upload-photo', async (req, res) => {
  try {
    const { imageBase64, filename } = req.body;

    if (!imageBase64 || !filename) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: imageBase64, filename' });
    }

    const buffer = Buffer.from(imageBase64, 'base64');

    const params = {
      Bucket: process.env.YANDEX_BUCKET,
      Key: filename,
      Body: buffer,
      ContentType: 'image/jpeg',
      ACL: 'public-read',
    };

    const upload = await s3.upload(params).promise();
    console.log('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', upload.Location);

    res.json({
      success: true,
      message: '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!',
      url: upload.Location,
    });
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message });
  }
});

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ S3 –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
restorePlacesFromS3().then(() => {
  app.listen(3000, () => {
    console.log('üöÄ Server running on port 3000');
    console.log('üì∏ Available endpoints:');
    console.log('   GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('   GET  /places.json - –∫–∞—Ä—Ç–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π');
    console.log('   POST /upload - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å GPS');
    console.log('   GET  /photos - –≤—Å–µ —Ñ–æ—Ç–æ');
    console.log('   POST /send-invite - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
    console.log('   POST /upload-photo - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ (base64)');
    console.log(`üìç Currently have ${getPlacesCount()} photos in database`);
  });
});